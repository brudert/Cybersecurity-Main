security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        users_in_memory: { memory: null }

        # this providers section is for ldap
        my_ldap:
            ldap:
                service: ldap
                base_dn: 'CN=Users,DC=KILLERBE,DC=fr'
                search_dn: 'cn=user,CN=Users,DC=KILLERBE,DC=fr'
                search_password: user123
                default_roles: ROLE_USER
                uid_key: userPrincipalName
        # used to reload user from session & other features (e.g. switch_user)
        #app_user_provider:
            #id: App\Security\UserProvider
                #extra_fields: ['email']
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            #lazy: true
            provider: my_ldap
            


            form_login_ldap:
                # ...
                login_path: app_login
                check_path: app_login
                username_parameter: _username
                password_parameter: _password
                service: ldap

            logout:
                path: app_logout    
                #dn_string: 'uid={user_identifier},dc=KILLERBE,dc=fr'

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/home, roles: ROLE_USER }
         #- { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
